{{#withSeparateModelsAndApi}}
{{>licenseInfo}}

import { axios, AxiosHookConfig, AxiosHookOptions, IClientResp, useRequest } from '../base'

import { {{#imports}}{{classname}},{{/imports}} } from '{{apiRelativeToRoot}}{{tsModelPackage}}';
{{/withSeparateModelsAndApi}}
{{^withSeparateModelsAndApi}}
{{/withSeparateModelsAndApi}}

{{#operations}}

{{#useSingleRequestParameter}}
{{#operation}}
{{#allParams.0}}
{{^isBodyParam}}
/**
 * Request parameters for {{nickname}} operation in {{classname}}.
 * @export
 * @interface {{classname}}{{operationIdCamelCase}}Request
 */
export interface {{classname}}{{operationIdCamelCase}}Request {
    {{#allParams}}
    /**
     * {{description}}
     * @type {{=<% %>=}}{<%&dataType%>}<%={{ }}=%>
     */
    readonly {{paramName}}{{^required}}?{{/required}}: {{{dataType}}}
    {{^-last}}

    {{/-last}}
    {{/allParams}}
}
{{/isBodyParam}}
{{/allParams.0}}
{{/operation}}
{{/useSingleRequestParameter}}

{{#withInterfaces}}
/**
 * {{classname}} - object-oriented interface{{#description}}
 * {{{description}}}{{/description}}
 * @export
 * @class {{classname}}
 * @extends {BaseAPI}
 */

{{#operation}}
/**
 * {{&notes}}
 {{#summary}}
 * @summary {{&summary}}
 {{/summary}}
 */
{{#useSingleRequestParameter}}
export const {{nickname}} = ({{#allParams.0}}requestParameters: {{#isBodyParam}}{{{dataType}}}{{/isBodyParam}}{{^isBodyParam}}{{classname}}{{operationIdCamelCase}}Request{{/isBodyParam}}{{/allParams.0}}) => {
    return axios.{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}<IClientResp<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}>>(
        '{{{path}}}'{{#pathParams}}.replace(`{${"{{baseName}}"}}`, encodeURIComponent(String(requestParameters.{{paramName}}))){{/pathParams}},
    {{#hasParams}}{{#hasBodyOrFormParams}}requestParameters,{{/hasBodyOrFormParams}}
    {{^hasBodyOrFormParams}}{{#hasQueryParams}}{params:requestParameters},{{/hasQueryParams}}{{#hasPathParams}}{params:requestParameters},{{/hasPathParams}}{{/hasBodyOrFormParams}}{{/hasParams}}
)}
{{/useSingleRequestParameter}}
{{^-last}}
{{/-last}}
{{/operation}}

{{#operation}}
/**
 * {{&notes}}
 {{#summary}}
 * @summary {{&summary}}
 {{/summary}}
 */
 {{#useSingleRequestParameter}}
export const use{{operationIdCamelCase}} = (
    {{#allParams.0}}requestParameters: {{#isBodyParam}}{{{dataType}}}{{/isBodyParam}}{{^isBodyParam}}{{classname}}{{operationIdCamelCase}}Request{{/isBodyParam}},{{/allParams.0}}
    options?: AxiosHookOptions,
    config: AxiosHookConfig = {}
) => {
    return useRequest<IClientResp<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}>>({
        url: '{{{path}}}'{{#pathParams}}.replace(`{${"{{baseName}}"}}`, encodeURIComponent(String(requestParameters.{{paramName}}))){{/pathParams}},
        method: '{{httpMethod}}',
        {{#hasParams}}{{#hasBodyOrFormParams}}data:requestParameters{{/hasBodyOrFormParams}}
        {{^hasBodyOrFormParams}}{{#hasQueryParams}}params:requestParameters{{/hasQueryParams}}{{#hasPathParams}}params:requestParameters{{/hasPathParams}}{{/hasBodyOrFormParams}},{{/hasParams}}
        ...config
    },
    options
)}
{{/useSingleRequestParameter}}
{{^-last}}
{{/-last}}
{{/operation}}
{{/withInterfaces}}

{{/operations}}
