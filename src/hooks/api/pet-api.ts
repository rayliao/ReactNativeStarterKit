/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  axios,
  AxiosHookConfig,
  AxiosHookOptions,
  IClientResp,
  useRequest,
} from '../base';

import {ApiResponse, Pet} from '../models';

/**
 * Request parameters for deletePet operation in PetApi.
 * @export
 * @interface PetApiDeletePetRequest
 */
export interface PetApiDeletePetRequest {
  /**
   * Pet id to delete
   * @type {number}
   */
  readonly petId: number;

  /**
   *
   * @type {string}
   */
  readonly apiKey?: string;
}
/**
 * Request parameters for findPetsByStatus operation in PetApi.
 * @export
 * @interface PetApiFindPetsByStatusRequest
 */
export interface PetApiFindPetsByStatusRequest {
  /**
   * Status values that need to be considered for filter
   * @type {Array<'available' | 'pending' | 'sold'>}
   */
  readonly status: Array<'available' | 'pending' | 'sold'>;
}
/**
 * Request parameters for findPetsByTags operation in PetApi.
 * @export
 * @interface PetApiFindPetsByTagsRequest
 */
export interface PetApiFindPetsByTagsRequest {
  /**
   * Tags to filter by
   * @type {Array<string>}
   */
  readonly tags: Array<string>;
}
/**
 * Request parameters for getPetById operation in PetApi.
 * @export
 * @interface PetApiGetPetByIdRequest
 */
export interface PetApiGetPetByIdRequest {
  /**
   * ID of pet to return
   * @type {number}
   */
  readonly petId: number;
}
/**
 * Request parameters for updatePetWithForm operation in PetApi.
 * @export
 * @interface PetApiUpdatePetWithFormRequest
 */
export interface PetApiUpdatePetWithFormRequest {
  /**
   * ID of pet that needs to be updated
   * @type {number}
   */
  readonly petId: number;

  /**
   * Updated name of the pet
   * @type {string}
   */
  readonly name?: string;

  /**
   * Updated status of the pet
   * @type {string}
   */
  readonly status?: string;
}
/**
 * Request parameters for uploadFile operation in PetApi.
 * @export
 * @interface PetApiUploadFileRequest
 */
export interface PetApiUploadFileRequest {
  /**
   * ID of pet to update
   * @type {number}
   */
  readonly petId: number;

  /**
   * Additional data to pass to server
   * @type {string}
   */
  readonly additionalMetadata?: string;

  /**
   * file to upload
   * @type {any}
   */
  readonly file?: any;
}

/**
 * PetApi - object-oriented interface
 * @export
 * @class PetApi
 * @extends {BaseAPI}
 */

/**
 *
 * @summary Add a new pet to the store
 */
export const addPet = (requestParameters: Pet) => {
  return axios.post<IClientResp<Pet>>('/pet', requestParameters);
};
/**
 *
 * @summary Deletes a pet
 */
export const deletePet = (requestParameters: PetApiDeletePetRequest) => {
  return axios._delete<IClientResp<void>>(
    '/pet/{petId}'.replace(
      `{${'petId'}}`,
      encodeURIComponent(String(requestParameters.petId)),
    ),

    {params: requestParameters},
  );
};
/**
 * Multiple status values can be provided with comma separated strings
 * @summary Finds Pets by status
 */
export const findPetsByStatus = (
  requestParameters: PetApiFindPetsByStatusRequest,
) => {
  return axios.get<IClientResp<Array<Pet>>>(
    '/pet/findByStatus',

    {params: requestParameters},
  );
};
/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @summary Finds Pets by tags
 */
export const findPetsByTags = (
  requestParameters: PetApiFindPetsByTagsRequest,
) => {
  return axios.get<IClientResp<Array<Pet>>>(
    '/pet/findByTags',

    {params: requestParameters},
  );
};
/**
 * Returns a single pet
 * @summary Find pet by ID
 */
export const getPetById = (requestParameters: PetApiGetPetByIdRequest) => {
  return axios.get<IClientResp<Pet>>(
    '/pet/{petId}'.replace(
      `{${'petId'}}`,
      encodeURIComponent(String(requestParameters.petId)),
    ),

    {params: requestParameters},
  );
};
/**
 *
 * @summary Update an existing pet
 */
export const updatePet = (requestParameters: Pet) => {
  return axios.put<IClientResp<Pet>>('/pet', requestParameters);
};
/**
 *
 * @summary Updates a pet in the store with form data
 */
export const updatePetWithForm = (
  requestParameters: PetApiUpdatePetWithFormRequest,
) => {
  return axios.post<IClientResp<void>>(
    '/pet/{petId}'.replace(
      `{${'petId'}}`,
      encodeURIComponent(String(requestParameters.petId)),
    ),
    requestParameters,
  );
};
/**
 *
 * @summary uploads an image
 */
export const uploadFile = (requestParameters: PetApiUploadFileRequest) => {
  return axios.post<IClientResp<ApiResponse>>(
    '/pet/{petId}/uploadImage'.replace(
      `{${'petId'}}`,
      encodeURIComponent(String(requestParameters.petId)),
    ),
    requestParameters,
  );
};

/**
 *
 * @summary Add a new pet to the store
 */
export const useAddPet = (
  requestParameters: Pet,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<Pet>>(
    {
      url: '/pet',
      method: 'POST',
      data: requestParameters,
      ...config,
    },
    options,
  );
};
/**
 *
 * @summary Deletes a pet
 */
export const useDeletePet = (
  requestParameters: PetApiDeletePetRequest,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<void>>(
    {
      url: '/pet/{petId}'.replace(
        `{${'petId'}}`,
        encodeURIComponent(String(requestParameters.petId)),
      ),
      method: 'DELETE',

      params: requestParameters,
      ...config,
    },
    options,
  );
};
/**
 * Multiple status values can be provided with comma separated strings
 * @summary Finds Pets by status
 */
export const useFindPetsByStatus = (
  requestParameters: PetApiFindPetsByStatusRequest,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<Array<Pet>>>(
    {
      url: '/pet/findByStatus',
      method: 'GET',

      params: requestParameters,
      ...config,
    },
    options,
  );
};
/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @summary Finds Pets by tags
 */
export const useFindPetsByTags = (
  requestParameters: PetApiFindPetsByTagsRequest,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<Array<Pet>>>(
    {
      url: '/pet/findByTags',
      method: 'GET',

      params: requestParameters,
      ...config,
    },
    options,
  );
};
/**
 * Returns a single pet
 * @summary Find pet by ID
 */
export const useGetPetById = (
  requestParameters: PetApiGetPetByIdRequest,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<Pet>>(
    {
      url: '/pet/{petId}'.replace(
        `{${'petId'}}`,
        encodeURIComponent(String(requestParameters.petId)),
      ),
      method: 'GET',

      params: requestParameters,
      ...config,
    },
    options,
  );
};
/**
 *
 * @summary Update an existing pet
 */
export const useUpdatePet = (
  requestParameters: Pet,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<Pet>>(
    {
      url: '/pet',
      method: 'PUT',
      data: requestParameters,
      ...config,
    },
    options,
  );
};
/**
 *
 * @summary Updates a pet in the store with form data
 */
export const useUpdatePetWithForm = (
  requestParameters: PetApiUpdatePetWithFormRequest,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<void>>(
    {
      url: '/pet/{petId}'.replace(
        `{${'petId'}}`,
        encodeURIComponent(String(requestParameters.petId)),
      ),
      method: 'POST',
      data: requestParameters,
      ...config,
    },
    options,
  );
};
/**
 *
 * @summary uploads an image
 */
export const useUploadFile = (
  requestParameters: PetApiUploadFileRequest,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<ApiResponse>>(
    {
      url: '/pet/{petId}/uploadImage'.replace(
        `{${'petId'}}`,
        encodeURIComponent(String(requestParameters.petId)),
      ),
      method: 'POST',
      data: requestParameters,
      ...config,
    },
    options,
  );
};
