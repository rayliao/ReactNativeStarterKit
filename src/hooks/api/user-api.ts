/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  axios,
  AxiosHookConfig,
  AxiosHookOptions,
  IClientResp,
  useRequest,
} from '../base';

import {User} from '../models';

/**
 * Request parameters for deleteUser operation in UserApi.
 * @export
 * @interface UserApiDeleteUserRequest
 */
export interface UserApiDeleteUserRequest {
  /**
   * The name that needs to be deleted
   * @type {string}
   */
  readonly username: string;
}
/**
 * Request parameters for getUserByName operation in UserApi.
 * @export
 * @interface UserApiGetUserByNameRequest
 */
export interface UserApiGetUserByNameRequest {
  /**
   * The name that needs to be fetched. Use user1 for testing.
   * @type {string}
   */
  readonly username: string;
}
/**
 * Request parameters for loginUser operation in UserApi.
 * @export
 * @interface UserApiLoginUserRequest
 */
export interface UserApiLoginUserRequest {
  /**
   * The user name for login
   * @type {string}
   */
  readonly username: string;

  /**
   * The password for login in clear text
   * @type {string}
   */
  readonly password: string;
}
/**
 * Request parameters for updateUser operation in UserApi.
 * @export
 * @interface UserApiUpdateUserRequest
 */
export interface UserApiUpdateUserRequest {
  /**
   * name that need to be deleted
   * @type {string}
   */
  readonly username: string;

  /**
   * Updated user object
   * @type {User}
   */
  readonly user: User;
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */

/**
 * This can only be done by the logged in user.
 * @summary Create user
 */
export const createUser = (requestParameters: User) => {
  return axios.post<IClientResp<void>>('/user', requestParameters);
};
/**
 *
 * @summary Creates list of users with given input array
 */
export const createUsersWithArrayInput = (requestParameters: Array<User>) => {
  return axios.post<IClientResp<void>>(
    '/user/createWithArray',
    requestParameters,
  );
};
/**
 *
 * @summary Creates list of users with given input array
 */
export const createUsersWithListInput = (requestParameters: Array<User>) => {
  return axios.post<IClientResp<void>>(
    '/user/createWithList',
    requestParameters,
  );
};
/**
 * This can only be done by the logged in user.
 * @summary Delete user
 */
export const deleteUser = (requestParameters: UserApiDeleteUserRequest) => {
  return axios._delete<IClientResp<void>>(
    '/user/{username}'.replace(
      `{${'username'}}`,
      encodeURIComponent(String(requestParameters.username)),
    ),

    {params: requestParameters},
  );
};
/**
 *
 * @summary Get user by user name
 */
export const getUserByName = (
  requestParameters: UserApiGetUserByNameRequest,
) => {
  return axios.get<IClientResp<User>>(
    '/user/{username}'.replace(
      `{${'username'}}`,
      encodeURIComponent(String(requestParameters.username)),
    ),

    {params: requestParameters},
  );
};
/**
 *
 * @summary Logs user into the system
 */
export const loginUser = (requestParameters: UserApiLoginUserRequest) => {
  return axios.get<IClientResp<string>>(
    '/user/login',

    {params: requestParameters},
  );
};
/**
 *
 * @summary Logs out current logged in user session
 */
export const logoutUser = () => {
  return axios.get<IClientResp<void>>('/user/logout');
};
/**
 * This can only be done by the logged in user.
 * @summary Updated user
 */
export const updateUser = (requestParameters: UserApiUpdateUserRequest) => {
  return axios.put<IClientResp<void>>(
    '/user/{username}'.replace(
      `{${'username'}}`,
      encodeURIComponent(String(requestParameters.username)),
    ),
    requestParameters,
  );
};

/**
 * This can only be done by the logged in user.
 * @summary Create user
 */
export const useCreateUser = (
  requestParameters: User,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<void>>(
    {
      url: '/user',
      method: 'POST',
      data: requestParameters,
      ...config,
    },
    options,
  );
};
/**
 *
 * @summary Creates list of users with given input array
 */
export const useCreateUsersWithArrayInput = (
  requestParameters: Array<User>,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<void>>(
    {
      url: '/user/createWithArray',
      method: 'POST',
      data: requestParameters,
      ...config,
    },
    options,
  );
};
/**
 *
 * @summary Creates list of users with given input array
 */
export const useCreateUsersWithListInput = (
  requestParameters: Array<User>,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<void>>(
    {
      url: '/user/createWithList',
      method: 'POST',
      data: requestParameters,
      ...config,
    },
    options,
  );
};
/**
 * This can only be done by the logged in user.
 * @summary Delete user
 */
export const useDeleteUser = (
  requestParameters: UserApiDeleteUserRequest,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<void>>(
    {
      url: '/user/{username}'.replace(
        `{${'username'}}`,
        encodeURIComponent(String(requestParameters.username)),
      ),
      method: 'DELETE',

      params: requestParameters,
      ...config,
    },
    options,
  );
};
/**
 *
 * @summary Get user by user name
 */
export const useGetUserByName = (
  requestParameters: UserApiGetUserByNameRequest,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<User>>(
    {
      url: '/user/{username}'.replace(
        `{${'username'}}`,
        encodeURIComponent(String(requestParameters.username)),
      ),
      method: 'GET',

      params: requestParameters,
      ...config,
    },
    options,
  );
};
/**
 *
 * @summary Logs user into the system
 */
export const useLoginUser = (
  requestParameters: UserApiLoginUserRequest,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<string>>(
    {
      url: '/user/login',
      method: 'GET',

      params: requestParameters,
      ...config,
    },
    options,
  );
};
/**
 *
 * @summary Logs out current logged in user session
 */
export const useLogoutUser = (
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<void>>(
    {
      url: '/user/logout',
      method: 'GET',

      ...config,
    },
    options,
  );
};
/**
 * This can only be done by the logged in user.
 * @summary Updated user
 */
export const useUpdateUser = (
  requestParameters: UserApiUpdateUserRequest,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<void>>(
    {
      url: '/user/{username}'.replace(
        `{${'username'}}`,
        encodeURIComponent(String(requestParameters.username)),
      ),
      method: 'PUT',
      data: requestParameters,
      ...config,
    },
    options,
  );
};
