/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  axios,
  AxiosHookConfig,
  AxiosHookOptions,
  IClientResp,
  useRequest,
} from '../base';

import {Order} from '../models';

/**
 * Request parameters for deleteOrder operation in StoreApi.
 * @export
 * @interface StoreApiDeleteOrderRequest
 */
export interface StoreApiDeleteOrderRequest {
  /**
   * ID of the order that needs to be deleted
   * @type {string}
   */
  readonly orderId: string;
}
/**
 * Request parameters for getOrderById operation in StoreApi.
 * @export
 * @interface StoreApiGetOrderByIdRequest
 */
export interface StoreApiGetOrderByIdRequest {
  /**
   * ID of pet that needs to be fetched
   * @type {number}
   */
  readonly orderId: number;
}

/**
 * StoreApi - object-oriented interface
 * @export
 * @class StoreApi
 * @extends {BaseAPI}
 */

/**
 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 * @summary Delete purchase order by ID
 */
export const deleteOrder = (requestParameters: StoreApiDeleteOrderRequest) => {
  return axios._delete<IClientResp<void>>(
    '/store/order/{orderId}'.replace(
      `{${'orderId'}}`,
      encodeURIComponent(String(requestParameters.orderId)),
    ),

    {params: requestParameters},
  );
};
/**
 * Returns a map of status codes to quantities
 * @summary Returns pet inventories by status
 */
export const getInventory = () => {
  return axios.get<IClientResp<{[key: string]: number}>>('/store/inventory');
};
/**
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
 * @summary Find purchase order by ID
 */
export const getOrderById = (
  requestParameters: StoreApiGetOrderByIdRequest,
) => {
  return axios.get<IClientResp<Order>>(
    '/store/order/{orderId}'.replace(
      `{${'orderId'}}`,
      encodeURIComponent(String(requestParameters.orderId)),
    ),

    {params: requestParameters},
  );
};
/**
 *
 * @summary Place an order for a pet
 */
export const placeOrder = (requestParameters: Order) => {
  return axios.post<IClientResp<Order>>('/store/order', requestParameters);
};

/**
 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 * @summary Delete purchase order by ID
 */
export const useDeleteOrder = (
  requestParameters: StoreApiDeleteOrderRequest,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<void>>(
    {
      url: '/store/order/{orderId}'.replace(
        `{${'orderId'}}`,
        encodeURIComponent(String(requestParameters.orderId)),
      ),
      method: 'DELETE',

      params: requestParameters,
      ...config,
    },
    options,
  );
};
/**
 * Returns a map of status codes to quantities
 * @summary Returns pet inventories by status
 */
export const useGetInventory = (
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<{[key: string]: number}>>(
    {
      url: '/store/inventory',
      method: 'GET',

      ...config,
    },
    options,
  );
};
/**
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
 * @summary Find purchase order by ID
 */
export const useGetOrderById = (
  requestParameters: StoreApiGetOrderByIdRequest,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<Order>>(
    {
      url: '/store/order/{orderId}'.replace(
        `{${'orderId'}}`,
        encodeURIComponent(String(requestParameters.orderId)),
      ),
      method: 'GET',

      params: requestParameters,
      ...config,
    },
    options,
  );
};
/**
 *
 * @summary Place an order for a pet
 */
export const usePlaceOrder = (
  requestParameters: Order,
  options?: AxiosHookOptions,
  config: AxiosHookConfig = {},
) => {
  return useRequest<IClientResp<Order>>(
    {
      url: '/store/order',
      method: 'POST',
      data: requestParameters,
      ...config,
    },
    options,
  );
};
